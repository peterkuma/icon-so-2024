#!/usr/bin/env python3
'''Download MERRA-2 data for voyages.

Usage: download_merra2_2 INPUT OUTPUT

Arguments:

  INPUT   Input track file (NetCDF).
  OUTPUT  Output directory.
'''

JOBS = 1

PRODUCT_SURF = 'M2T1NXFLX'
PRODUCT_3D = 'M2I3NVASM'

TEMPLATE_SURF = 'https://goldsmr4.gesdisc.eosdis.nasa.gov/daac-bin/OTF/HTTP_services.cgi?FILENAME=%2Fdata%2FMERRA2%2FM2T1NXFLX.5.12.4%2F{year:04d}%2F{month:02d}%2FMERRA2_{gen}.tavg1_2d_flx_Nx.{year:04d}{month:02d}{day:02d}.nc4&BBOX={lat1:.3f}%2C{lon1:.3f}%2C{lat2:.3f}%2C{lon2:.3f}&FORMAT=bmM0Lw&SHORTNAME=M2T1NXFLX&LABEL=MERRA2_{gen}.tavg1_2d_flx_Nx.{year:04d}{month:02d}{day:02d}.SUB.nc&SERVICE=L34RS_MERRA2&VERSION=1.02&VARIABLES=FRSEAICE%2CPRECTOT%2CPRECTOTCORR&DATASET_VERSION=5.12.4'

TEMPLATE_3D = 'https://goldsmr5.gesdisc.eosdis.nasa.gov/daac-bin/OTF/HTTP_services.cgi?FILENAME=%2Fdata%2FMERRA2%2FM2I3NVASM.5.12.4%2F{year:04d}%2F{month:02d}%2FMERRA2_{gen}.inst3_3d_asm_Nv.{year:04d}{month:02d}{day:02d}.nc4&LABEL=MERRA2_{gen}.inst3_3d_asm_Nv.{year:04d}{month:02d}{day:02d}.SUB.nc&SERVICE=L34RS_MERRA2&DATASET_VERSION=5.12.4&FORMAT=bmM0Lw&VERSION=1.02&SHORTNAME=M2I3NVASM&BBOX={lat1:.3f}%2C{lon1:.3f}%2C{lat2:.3f}%2C{lon2:.3f}&VARIABLES=CLOUD%2CH%2CPHIS%2CPL%2CQI%2CQL%2CPS%2CT'

COOKIE = '251517904871831611131011912614=s%3Aw4bjIVdMvwCDjTsvt0aHOZLjg6nOTqlU.40JlXjQQ0zPP1973sdSxVs8kRi6G8XvAbWUuxSzGq6A; nasa_gesdisc_data_archive=TvzWQUTkRji4wRJhcm5PO1lj7dGE3VsGX1pakUhY3uC3f4UEhIE5QPyYxqh/Ai/WUo5rt9aZXtwXrgHwJeAHAeLquGzEdzPWinTjgd/tt6GwQCzjyTR9k4cdD8nTL17fOBqIXeDQ6vfSGuHLxx+/bRmCDLKTk3wg+e1Rg26mdD+K+yhx5xLgFgszj3eJXoFFl/5Ujw2ECbpbkPL412dNDT8cANTz7WaiuX6wC068OJU63yIEhPLwlDvzjOa++v5ZCjOKEj18PK/wlE/5c5kwYxYywVuS/wHPe/qu9BdR5hOgB/Naze67UlyOd5ogwYJ53gyjbE76/lvWET/vrhVGXT2+FJbgIEG0/MxlwcJD86vdJ7D73sJ8Ki9HfBnWWzC+EaoCF081aXRI0iGS3XSKZ3FTA059avu6K/JwbSeo2798nkX2SSC2C07sUM6FT/g0Oq/C8fkLY878GRBjyUuofdX7MH3/X0l6SCBxiVoIAq1jhmFQwlf9ICEt06DlVQMejFdkn0usMLLjKX5N+jz15r9uwMRM6a6wOb3cwi34aPNOPB5BjhkFDFlOk/yOnkl48qnQxSCwF5vCsgRUhDRT0sDLyeRHcdSqJM9qsiovNw1JBNWEoat6rEwVMWzlwMyzZUSpe4UFo4Mfg0xXLizmfWyrSz9t7I1o5yAhvTJdUplO/VjoGlY56GNtHVHBVVyEmQ79wMPW/L+A+rL0A1Ju37owvlW1B/DQ0TfbYMbh0fAuuIgr48LjP/jvpdaycwaM1jrAR82d+ZKZaujJtw+3LWnuzOuzSvKxAT4ac1L02xqq0YuuE7A8a8mTcSgw0zJ4KXTD/qk+smimCoFNhfC6ijYqmy1OhYVPtmBBrgMrEo9HS2o1c40MWa5T/l5Y2NabAXX7A6zmG+nTp1KeiFNrfTYgfVqDUbBrKgvguJiXr/Oyi2TZ2MXxClmE7qWjFqmxVF8GnfaeQBniTXCuKRXHVg=='

import sys
import os
import tempfile
from multiprocessing.pool import Pool
import shutil
import warnings
import requests
import numpy as np
import ds_format as ds
import aquarius_time as aq

def download(template, year, month, day, lon1, lon2, lat1, lat2, out):
	url = template.format(
		year=year, month=month, day=day,
		lat1=lat1, lat2=lat2,
		lon1=lon1, lon2=lon2,
		gen=(300 if year < 2011 else 400),
	)
	print(url)
	response = requests.get(url, headers={'Cookie': COOKIE})
	with open(out, 'wb') as f:
		f.write(response.content)

if __name__ == '__main__':
	if len(sys.argv) != 3:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = sys.argv[1]
	output = sys.argv[2]

	d = ds.read(input_)

	start = d['time'][0]
	end = d['time'][-1]

	start = np.floor(start - 0.5) + 0.5
	end = np.floor(end - 0.5) + 0.5

	items = []
	for t in np.arange(start, end + 1):
		mask = (d['time'] >= t) & (d['time'] < t + 1)
		if np.sum(mask) == 0:
			continue
		lon = d['lon'][mask]
		lat = d['lat'][mask]
		lon1 = np.floor(np.min(lon))
		lon2 = np.ceil(np.max(lon))
		lat1 = np.floor(np.min(lat))
		lat2 = np.ceil(np.max(lat))
		items += [[t, lon1, lon2, lat1, lat2]]

	with tempfile.TemporaryDirectory() as tmpdir:
		def task(args):
			try:
				t, *args2 = args
				date = aq.to_date(t)
				year, month, day = date[1:4]
				name = '%04d-%02d-%02d.nc' % (year, month, day)
				for product, template in zip(
					[PRODUCT_SURF, PRODUCT_3D],
					[TEMPLATE_SURF, TEMPLATE_3D]
				):
					try: os.mkdir(os.path.join(output, product))
					except FileExistsError: pass
					out = os.path.join(output, product, name)
					if os.path.exists(out):
						continue
					tmpfile = os.path.join(tmpdir, '%s_%s' % (product, name))
					print('download', year, month, day, *args2, tmpfile)
					download(template, year, month, day, *args2, tmpfile)
					print('shutil.move', tmpfile, out)
					shutil.move(tmpfile, out)
			except Exception as e:
				print(e)

		with Pool(JOBS) as pool:
			pool.map(task, items)
