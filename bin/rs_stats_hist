#!/usr/bin/env python3
'''Calculate radiosonde histograms.

Usage: rs_stats_hist RS LIDAR FILTER ALCF_FILTER OUTPUT

Arguments:

  RS           Input directory with radiosonde profiles - the output of rstool (NetCDF).
  LIDAR        Input directory with lidar profiles - the output of alcf lidar (NetCDF).
  FILTER       One of: "clear", "cloudy", "none".
  ALCF_FILTER  ALCF include filter (NetCDF).
  OUTPUT       Output file (NetCDF).
'''

import sys
import os
import glob
import warnings
import numpy as np
import aquarius_time as aq
import ds_format as ds

META = {
	'hur': {
		'.dims': ['hur'],
		'standard_name': 'relative_humdity',
		'units': '%',
	},
	'hur_hist': {
		'.dims': ['zg', 'hur'],
		'long_name': 'realtive humidity histogram',
		'units': '1',
	},
	'thetav': {
		'.dims': ['thetav'],
		'standard_name': 'virtual_temperature',
		'long_name': 'virtual potential temperature',
		'units': 'K',
	},
	'thetav_hist': {
		'.dims': ['zg', 'thetav'],
		'long_name': 'virtual potential temperature histogram',
		'units': '1',
	},
	'zg': {
		'.dims': ['zg'],
		'standard_name': 'geopotential_height',
		'units': 'm',
	},
}

VARS = ['hur', 'thetav']

LIMS = {
	'hur': [0, 100, 1],
	'thetav': [273.15-50, 273.15+50, 1],
}

def read_lidar(dirname, path, t):
	date = aq.to_date(t)
	file = '%d-%02d-%02dT000000.nc' % (date[1], date[2], date[3])
	filename = os.path.join(dirname, path, 'lidar', file)
	#print('<- %s' % filename)
	try:
		d = ds.read(filename, ['time', 'zfull', 'cloud_mask'])
	except OSError:
		return None, None
	i = np.argmin(np.abs(d['time'] - t))
	zfull = d['zfull']
	cloud_mask = d['cloud_mask'][i].astype(bool)
	return zfull, cloud_mask[:,0] if cloud_mask.ndim == 2 else cloud_mask

if __name__ == '__main__':
	if len(sys.argv) != 6:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	rs = sys.argv[1]
	lidar = sys.argv[2]
	filter_ = sys.argv[3]
	alcf_filter = sys.argv[4]
	output = sys.argv[5]

	if alcf_filter is not None:
		#print('<- %s' % alcf_filter)
		d = ds.read(alcf_filter)
		filter_time_bnds = d['time_bnds']

	x = {}
	x_half = {}
	x_n = {}
	x_hist = {}

	for var in VARS:
		lims = LIMS[var]
		x_half[var] = np.arange(lims[0], lims[1] + lims[2], lims[2])
		x[var] = 0.5*(x_half[var][:-1] + x_half[var][1:])
		x_n[var] = len(x[var])
		x_hist[var] = None
	zfull = None

	for file in sorted(glob.glob('**/*.nc', recursive=True, root_dir=rs)):
		filename = os.path.join(rs, file)
		#print('<- %s' % filename)
		d = ds.read(filename)
		t = d['time'][0]

		if filter_time_bnds is not None:
			for t1, t2 in filter_time_bnds:
				if t >= t1 and t < t2:
					break
			else:
				print('%s: skipping (filter)' % filename)
				continue
	
		zfull1, cloud_mask = read_lidar(lidar, os.path.dirname(file), t)
		if zfull1 is None or cloud_mask is None:
			continue
		zfull = zfull1
		for var in VARS:
			lims = LIMS[var]
			rs_x = np.interp(zfull, d['zg'], d[var],
				left=np.nan,
				right=np.nan)
			if x_hist[var] is None:
				m = len(zfull)
				x_hist[var] = np.zeros((m, x_n[var]), np.int64)
			for i in range(m):
				if np.isnan(cloud_mask[i]): continue
				if filter_ == 'cloudy' and not cloud_mask[i]: continue
				if filter_ == 'clear' and cloud_mask[i]: continue
				if np.isfinite(rs_x[i]):
					j = min(x_n[var] - 1, max(0,
						int((rs_x[i] - lims[0])//lims[2])
					))
					x_hist[var][i,j] += 1
	print('-> %s' % output)
	d = {
		'zg': zfull,
		'.': META,
	}
	for var in VARS:
		d[var] = x[var]
		d[var+'_hist'] = x_hist[var]
	ds.write(output, d)
