#!/usr/bin/env python3
'''Calculate radiosonde statistics from a set of radiosonde launches.

Usage: rs_stats INPUT [FILTER...] LAT1 LAT2 OUTPUT

Arguments:

  INPUT   Input directory - the output of rstool (NetCDF).
  FILTER  ALCF include filter (NetCDF).
  LAT1    Start latitude.
  LAT2    End latitude.
  OUTPUT  Output file (NetCDF).
'''

META = {
	'thetav_avg': {
		'.dims': ['zg'],
		'standard_name': 'air_potential_temperature',
		'units': 'K',
	},
	'thetav_low': {
		'.dims': ['zg'],
		'standard_name': 'air_potential_temperature',
		'units': 'K',
	},
	'thetav_high': {
		'.dims': ['zg'],
		'standard_name': 'air_potential_temperature',
		'units': 'K',
	},
	'hur_avg': {
		'.dims': ['zg'],
		'standard_name': 'relative_humidity',
		'units': '%',
	},
	'hur_low': {
		'.dims': ['zg'],
		'standard_name': 'relative_humidity',
		'units': '%',
	},
	'hur_high': {
		'.dims': ['zg'],
		'standard_name': 'relative_humidity',
		'units': '%',
	},
	'zg': {
		'.dims': ['zg'],
		'standard_name': 'geopotential_height',
		'units': 'm',
	},
	'lcl': {
		'.dims': ['lcl'],
		'standard_name': 'geopotential_height',
		'long_name': 'lifting condensation level geopotential height',
		'units': 'm',
	},
	'lcl_half': {
		'.dims': ['lcl_half'],
		'standard_name': 'geopotential_height',
		'long_name': 'lifting condensation level geopotential height at half-levels',
		'units': 'm',
	},
	'lcl_hist': {
		'.dims': ['lcl'],
		'long_name': 'lifting condensation level geopotential height histogram',
	},
	'n': {
		'.dims': [],
		'long_name': 'number of profiles',
		'units': '1',
	},
	'lts': {
		'.dims': ['lts'],
		'long_name': 'lower tropospheric stability',
		'units': 'K',
	},
	'lts_half': {
		'.dims': ['lts_half'],
		'long_name': 'lower tropospheric stability at half-levels',
		'units': 'K',
	},
	'lts_hist': {
		'.dims': ['lts'],
		'long_name': 'lower tropospheric stability histogram',
		'units': '1',
	},
	'lts25': {
		'.dims': ['lts25'],
		'long_name': '25-m lower tropospheric stability',
		'units': 'K',
	},
	'lts25_half': {
		'.dims': ['lts25_half'],
		'long_name': '25-m lower tropospheric stability at half-levels',
		'units': 'K',
	},
	'lts25_hist': {
		'.dims': ['lts25'],
		'long_name': '25-m lower tropospheric stability histogram',
		'units': '1',
	},
	'lts500': {
		'.dims': ['lts500'],
		'long_name': '500-m lower tropospheric stability',
		'units': 'K',
	},
	'lts500_half': {
		'.dims': ['lts500_half'],
		'long_name': '500-m lower tropospheric stability at half-levels',
		'units': 'K',
	},
	'lts500_hist': {
		'.dims': ['lts500'],
		'long_name': '500-m lower tropospheric stability histogram',
		'units': '1',
	},
	'lts1500': {
		'.dims': ['lts1500'],
		'long_name': '1500-m lower tropospheric stability',
		'units': 'K',
	},
	'lts1500_half': {
		'.dims': ['lts1500_half'],
		'long_name': '1500-m lower tropospheric stability at half-levels',
		'units': 'K',
	},
	'lts1500_hist': {
		'.dims': ['lts1500'],
		'long_name': '1500-m lower tropospheric stability histogram',
		'units': '1',		
	},
	'tas': {
		'.dims': ['ta'],
		'standard_name': 'air_temperature',
		'long_name': 'near-surface atmospheric temperature',
		'units': 'K',
	},
	'tas_half': {
		'.dims': ['ta_half'],
		'standard_name': 'air_temperature',
		'long_name': 'near-surface atmospheric temperature at half-levels',
		'units': 'K',
	},
	'tas_hist': {
		'.dims': ['ta'],
		'long_name': 'near-surface atmospheric temperature histogram',
		'units': '1',
	},
	'hurs': {
		'.dims': ['hur'],
		'standard_name': 'relative_humidity',
		'long_name': 'near-surface relative humidity',
		'units': '%',
	},
	'hurs_half': {
		'.dims': ['hur_half'],
		'standard_name': 'relative_humidity',
		'long_name': 'near-surface relative humidity at half-levels',
		'units': '%',
	},
	'hurs_hist': {
		'.dims': ['hurs'],
		'long_name': 'near-surface relative humidity histogram',
		'units': '1',		
	},
}

import sys
import os
import warnings
import numpy as np
import ds_format as ds
import aquarius_time as aq

def interpolate(zgo, zg, x, xs):
	mask = ~(np.ma.getmaskarray(zg) | np.ma.getmaskarray(x))
	if xs is not None:
		zg = np.concatenate((np.array([2]), zg))
		x = np.concatenate((np.array([xs]), x))
		mask = np.concatenate((np.array([True]), mask))
	if np.sum(mask) > 0:
		return np.interp(zgo, zg, x, left=np.nan, right=np.nan)

def calc_lts(zg, d):
	theta = np.interp(zg, d['zg'], d['theta'])
	thetas = d.get('thetas')
	return theta - thetas if thetas is not None else np.nan

if __name__ == '__main__':
	if len(sys.argv) < 5:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = sys.argv[1]
	filter_ = sys.argv[2:-3]
	lat1 = float(sys.argv[-3])
	lat2 = float(sys.argv[-2])
	output = sys.argv[-1]

	filters = []
	for filename in filter_:
		#print('<- %s' % filename)
		d = ds.read(filename)
		filters += [d['time_bnds']]

	if len(filters) > 0:
		time_bnds = np.concatenate(filters)
	else:
		time_bnds = []

	dd = []
	n = 0
	m = 0
	for file in sorted(os.listdir(input_)):
		n += 1
		if not file.endswith('.nc'):
			continue
		filename = os.path.join(input_, file)
		#print('<- %s' % filename)
		d = ds.read(filename)

		lat = d['launch_lat'] if 'launch_lat' in d else d['lat'][0]
		time = d['launch_time'] if 'launch_time' in d else d['time'][0]

		if not (lat >= lat1 and lat < lat2):
			#print('%s: skipping (latitude)' % filename)
			m += 1
			continue

		if len(filters) > 0:
			for t1, t2 in time_bnds:
				if time >= t1 and time < t2:
					break
			else:
				#print('%s: skipping (filter)' % filename)
				m += 1
				continue

		mask = (
			~np.ma.getmaskarray(d['thetav']) & ~np.isnan(d['thetav']) &
			~np.ma.getmaskarray(d['zg']) & ~np.isnan(d['zg'])
		)
		ds.select(d, {'p': mask})
		d['filename'] = filename
		if len(d['p']) == 0:
			continue
		dd += [d]

	print('%d%% skipped' % (m/n*100))
	if m == n:
		sys.exit(0)

	do = {}

	zg = np.arange(0, 10e3, 10)
	lcl = []
	lcl_bins = np.arange(0, 5000 + 100, 100)
	lts = []
	lts25 = []
	lts500 = []
	lts1500 = []
	tas = []
	hurs = []
	lts_bins = np.arange(0, 3 + 1, 1)
	lts25_bins = np.arange(-2, 2 + 0.1, 0.1)
	lts500_bins = np.arange(-5, 5 + 0.5, 0.5)
	lts1500_bins = np.arange(-5, 5 + 0.5, 0.5)
	tas_bins = np.arange(273.15 -30, 273.15 + 30 + 1, 1)
	hurs_bins = np.arange(0, 100 + 2, 2)

	thetav = []
	hur = []
	for d in dd:
		thetav += [interpolate(zg, d['zg'], d['thetav'], d.get('thetavs'))]
		hur += [interpolate(zg, d['zg'], d['hur'], d.get('hurs'))]
		if 'lcl' in d: lcl += [d['lcl']]
		lts += [d['lts'] if d.get('lts') is not None else np.nan]
		lts25 += [calc_lts(25, d)]
		lts500 += [calc_lts(500, d)]
		lts1500 += [calc_lts(1500, d)]
		if 'tas' in d and d['tas'] is not None:
			tas += [d['tas']]
		else:
			warnings.warn('%s: tas not found' % d['filename'])
		if 'hurs' in d and d['hurs'] is not None:
			hurs += [d['hurs']]
		else:
			warnings.warn('%s: tas not found' % d['filename'])

	nprofiles = len(dd)
	thetav_avg = np.nanmean(thetav, axis=0)
	thetav_low = np.nanpercentile(thetav, 16, axis=0)
	thetav_high = np.nanpercentile(thetav, 84, axis=0)
	hur_v_avg = np.nanmean(hur, axis=0)
	hur_v_low = np.nanpercentile(hur, 16, axis=0)
	hur_v_high = np.nanpercentile(hur, 84, axis=0)
	lcl_hist = np.histogram(lcl, lcl_bins)[0]
	lts_hist = np.histogram(lts, lts_bins)[0]
	lts25_hist = np.histogram(lts25, lts25_bins)[0]
	lts500_hist = np.histogram(lts500, lts500_bins)[0]
	lts1500_hist = np.histogram(lts1500, lts1500_bins)[0]
	tas_hist = np.histogram(tas, tas_bins)[0]
	for value in hurs:
		print('%.6f' % value)
	hurs_hist = np.histogram(hurs, hurs_bins)[0]

	do = {
		'n': nprofiles,
		'zg': zg,
		'thetav_avg': thetav_avg,
		'thetav_low': thetav_low,
		'thetav_high': thetav_high,
		'hur_avg': hur_v_avg,
		'hur_low': hur_v_low,
		'hur_high': hur_v_high,
		'lcl': 0.5*(lcl_bins[1:] + lcl_bins[:-1]),
		'lcl_half': lcl_bins,
		'lcl_hist': lcl_hist,
		'lts': 0.5*(lts_bins[1:] + lts_bins[:-1]),
		'lts_half': lts_bins,
		'lts_hist': lts_hist,
		'lts25': 0.5*(lts25_bins[1:] + lts25_bins[:-1]),
		'lts25_half': lts25_bins,
		'lts25_hist': lts25_hist,
		'lts500': 0.5*(lts500_bins[1:] + lts500_bins[:-1]),
		'lts500_half': lts500_bins,
		'lts500_hist': lts500_hist,
		'lts1500': 0.5*(lts1500_bins[1:] + lts1500_bins[:-1]),
		'lts1500_half': lts1500_bins,
		'lts1500_hist': lts1500_hist,
		'tas': 0.5*(tas_bins[1:] + tas_bins[:-1]),
		'tas_half': tas_bins,
		'tas_hist': tas_hist,
		'hurs': 0.5*(hurs_bins[1:] + hurs_bins[:-1]),
		'hurs_half': hurs_bins,
		'hurs_hist': hurs_hist,
		'.': META,
	}

	print('-> %s' % output)
	ds.write(output, do)
