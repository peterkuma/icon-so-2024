#!/usr/bin/env python3
'''Create ALCF filter from model precipitation.

Usage: alcf_filter [PRECIP [THRESHOLD]] TRACK LAT OUTPUT

Arguments:

  PRECIP     Input directory - the output of alcf model with a pr variable (NetCDF).
  THRESHOLD  Precipitation threshold (mm.hr-1).
  TRACK      Input file with a voyage track (NetCDF).
  LAT        Northern latitude limit (degrees North).
  OUTPUT     Output file to be used with the filter_include alcf stats option (NetCDF).
'''

import sys
import numpy as np
import aquarius_time as aq
import ds_format as ds

THRESHOLD = 0.1 # mm h-1

def mask_to_intervals(mask, time):
	ii = np.where(mask)[0]
	if len(ii) == 0:
		return []
	mask2 = np.diff(ii)	> 1
	jj = np.where(mask2)[0]
	intervals = []
	i1 = ii[0]
	for j in jj:
		i2 = ii[j]
		intervals += [[time[i1], time[i2]]]
		i1 = ii[j+1]
	intervals += [[time[i1], time[ii[-1]]]]
	return intervals

if __name__ == '__main__':
	if len(sys.argv) not in (4, 5, 6):
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	precip = sys.argv[1] if len(sys.argv) in (5, 6) else None
	threshold = float(sys.argv[2]) if len(sys.argv) == 6 else THRESHOLD

	track = sys.argv[-3]
	lat = float(sys.argv[-2])
	output = sys.argv[-1]

	if precip is not None:
		#d_precip = ds.readdir(precip, ['time', 'time_bnds', 'pr'],
		#	merge='time',
		#	parallel=True
		#)
		dd_precip = ds.readdir(precip, ['time', 'time_bnds', 'input_pr'],
			parallel=True
		)
		dd_precip = [d_precip for d_precip in dd_precip if 'time' in d_precip]
		d_precip = ds.merge(dd_precip, 'time')
	else:
		d_precip = None
	d_track = ds.read(track)

	if d_precip is not None:
		dry_mask = d_precip['input_pr'] < threshold/3600
		dry_intervals = [
			[d_precip['time_bnds'][i,0], d_precip['time_bnds'][i,1]]
			for i in np.where(dry_mask)[0]
		]

	track_mask = d_track['lat'] < lat
	track_intervals = mask_to_intervals(track_mask, d_track['time'])

	if d_precip is not None:
		t1 = d_precip['time_bnds'][0,0]
		t2 = d_precip['time_bnds'][-1,1]
	else:
		t1 = d_track['time'][0]
		t2 = d_track['time'][-1]

	minute = 1/24/60
	time = np.arange(t1, t2 + minute, minute)
	n = len(time)
	mask1 = np.zeros(n, bool)
	mask2 = np.zeros(n, bool)
	for x in track_intervals:
		m = (time >= x[0]) & (time < x[1])
		mask1[m] = 1
	if d_precip is not None:
		for x in dry_intervals:
			m = (time >= x[0]) & (time < x[1])
			mask2[m] = 1
		print(1 - np.mean(mask2))
		mask = mask1 & mask2
	else:
		mask = mask1
	time_bnds = mask_to_intervals(mask, time)
	if len(time_bnds) == 0:
		time_bnds = np.zeros((0, 2))

	ds.write(output, {
		'time_bnds': time_bnds,
		'.': {
			'time_bnds': {
				'.dims': ['time', 'bnds'],
				'long_name': 'time bounds',
				'units': ds.drivers.netcdf.JD_UNITS,
				'calendar': ds.drivers.netcdf.JD_CALENDAR,
			},
		},
	})
