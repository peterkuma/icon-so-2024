#!/usr/bin/env python3
'''Plot geographical distribution.

Usage: plot_geo_dist TYPE INPUT1 [INPUT2] TRACKS OUTPUT

Arguments:

  TYPE    One of: "cyc" (cyclone), "stab" (stability), or a variable name.
  INPUT1  Input directory - the output of calc_cyc_dist or calc_lts_dist (NetCDF).
  INPUT2  Input reference directory - the output of calc_cyc_dist or calc_lts_dist (NetCDF).
  TRACKS  Directory with voyage tracks (NetCDF).
  OUTPUT  Output plot (PDF).
'''

import os
import sys
import numpy as np
import matplotlib.path as mpath
import ds_format as ds
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import cartopy.util as cutil
import matplotlib.pyplot as plt
import matplotlib as mpl
from scipy.interpolate import RegularGridInterpolator

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=9)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

LON = np.arange(0, 361, 1)
LAT = np.arange(-80, -41, 1)

LABEL = {
	'cyc': 'Fraction of cyclonic days (%)',
	'cyc_diff': 'Difference in fraction of cyclonic days (%)',
	'stab': 'Fraction of time steps with strong stability (%)',
	'stab_diff': 'Difference in fraction of time steps with strong stability (%)',
}

LEVELS = {
	'cyc': np.arange(0, 60, 5),
	'cyc_diff': np.arange(-20, 22, 2),
	'stab': np.arange(0, 105, 5),
	'stab_diff': np.arange(-50, 55, 5),
	'ps': np.arange(950, 1050, 5)*100,
	'p700': np.arange(698, 702.5, 0.5)*100,
	'tas': np.arange(250, 300, 5),
	'ta700': np.arange(245, 280, 5),
	'lts': np.arange(5, 25, 1),
}

CMAP = {
	'cyc': 'viridis',
	'cyc_diff': 'bwr',
	'stab': 'bwr',
	'stab_diff': 'bwr',
}

def read(dirname):
	lon = None
	lat = None
	z = None
	n = None
	for file in os.listdir(dirname):
		if not file.endswith('.nc'):
			continue
		filename = os.path.join(dirname, file)
		d = ds.read(filename)
		z1 = d['hist'] if type_ in ['cyc', 'stab'] else d[type_]
		if z is None:
			z = z1
			n = d['n']
		else:
			z += z1
			n += d['n']
		lon = d['lon']
		lat = d['lat']
	return {
		'lon': lon,
		'lat': lat,
		'z': z,
		'n': n,
	}

def regrid(x, lon1, lat1, lon2, lat2):
	raise NotImplementedError()

def plot_point(lon, lat):
	plt.scatter(lon, lat,
		transform=ccrs.PlateCarree(),
		marker='o',
		s=15,
		edgecolors='k',
		facecolors='none',
		alpha=0.5,
	)			

def plot_track(time, lon, lat):
	mask = ~np.isnan(lon) & ~np.isnan(lat)
	time = time[mask]
	lon = lon[mask]
	lat = lat[mask]
	dt = np.diff(time)
	dlon = np.diff(lon)
	m1 = dt > 6/24
	m2 = np.abs(dlon) > 10
	ii = np.where(m1 | m2)[0]
	ii = np.concatenate([[0], ii + 1, [len(time)]])
	for j in range(len(ii) - 1):
		a = ii[j]
		b = ii[j + 1]
		plt.plot(lon[a:b], lat[a:b],
			transform=ccrs.PlateCarree(),
			color='k',
			lw=0.3,
			alpha=0.5,
		)

if __name__ == '__main__':
	if len(sys.argv) < 4:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)

	type_ = sys.argv[1]
	input_ = sys.argv[2:-2]
	tracks = sys.argv[-2]
	output = sys.argv[-1]

	if len(input_) not in [1, 2]:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)

	dd = [read(dirname) for dirname in input_]

	fig = plt.figure()
	ax = fig.add_subplot(1, 1, 1, projection=ccrs.SouthPolarStereo())
	ax.set_extent([-180, 180, -90, -40], ccrs.PlateCarree())
	gl = ax.gridlines(
		zorder=200,
		alpha=0.5,
		draw_labels=True,
		rotate_labels=False,
		ylabel_style=dict(ha='left'),
	)
	ax.add_feature(cfeature.LAND,
		zorder=2,
		color='#e0e0e0',
		lw=0,
	)
	ax.add_feature(cfeature.COASTLINE,
		zorder=100,
		edgecolor='#666666',
		lw=0.5,
	)

	type_ext = type_ + ('_diff' if len(dd) == 2 else '')

	levels = LEVELS.get(type_ext)

	cmap = CMAP.get(type_ext)

	if len(dd) == 1:
		lon = dd[0]['lon']
		lat = dd[0]['lat']
		z = dd[0]['z']/dd[0]['n']
	else:
		lon = LON
		lat = LAT
		z0 = regrid(dd[0]['z'], dd[0]['lon'], dd[0]['lat'], lon, lat)
		z1 = regrid(dd[1]['z'], dd[1]['lon'], dd[1]['lat'], lon, lat)
		z = z0/dd[0]['n'] - z1/dd[1]['n']

	z2, x, y = cutil.add_cyclic(z.T, lon, lat)
	if type_ in ['cyc', 'stab']:
		z2 = z2*100
	cf = ax.contourf(x, y, z2,
		transform=ccrs.PlateCarree(),
		levels=levels,
		cmap=cmap,
	)

	plt.colorbar(cf, label=LABEL.get(type_ext, type_ext), ticks=levels)

	theta = np.linspace(0, 2*np.pi, 100)
	center, radius = [0.5, 0.5], 0.5
	verts = np.vstack([np.sin(theta), np.cos(theta)]).T
	circle = mpath.Path(verts * radius + center)
	ax.set_boundary(circle, transform=ax.transAxes)

	plt.draw()
	for ea in gl.label_artists:
		pos = ea.get_position()
		ea.set_text('â€‰' + ea.get_text())
		if (pos[0]==150):
			ea.set_position([0, pos[1] + 2])

	dd = ds.readdir(tracks)
	for d in dd:
		if np.all(d['lon'] == d['lon'][0]) and np.all(d['lat'] == d['lat'][0]):
			plot_point(d['lon'][0], d['lat'][0])
		else:
			plot_track(d['time'], d['lon'], d['lat'])

	plt.savefig(output, bbox_inches='tight', dpi=600)
