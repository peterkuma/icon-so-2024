#!/usr/bin/env python3
'''Plot geographical distribution.

Usage: plot_geo_dist TYPE INPUT... OUTPUT

Arguments:

  TYPE    One of: "cyc" (cyclone), "stab" (stability), or a variable name.
  INPUT   Input file - the output of calc_cyc_dist or calc_lts_dist (NetCDF).
  OUTPUT  Output plot (PDF).
'''

import sys
import numpy as np
import matplotlib.path as mpath
import ds_format as ds
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import cartopy.util as cutil
import matplotlib.pyplot as plt
import matplotlib as mpl

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=9)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

LABEL = {
	'cyc': 'Fraction of cyclonic days (%)',
	'stab': 'Fraction of stable time steps (%)'
}

LEVELS = {
	'cyc': np.arange(0, 60, 5),
	'stab': np.arange(0, 105, 5),
	'ps': np.arange(950, 1050, 5)*100,
	'p700': np.arange(698, 702.5, 0.5)*100,
	'tas': np.arange(250, 300, 5),
	'ta700': np.arange(245, 280, 5),
	'lts': np.arange(5, 25, 1),
}

CMAP = {
	'cyc': 'viridis',
	'stab': 'bwr',
}

if __name__ == '__main__':
	if len(sys.argv) < 4:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)

	type_ = sys.argv[1]
	input_ = sys.argv[2:-1]
	output = sys.argv[-1]

	lon = None
	lat = None
	z = None
	n = None

	for filename in input_:
		d = ds.read(filename)
		z1 = d['hist'] if type_ in ['cyc', 'stab'] else d[type_]
		if z is None:
			z = z1
			n = d['n']
		else:
			z += z1
			n += d['n']
		lon = d['lon']
		lat = d['lat']

	fig = plt.figure()
	ax = fig.add_subplot(1, 1, 1, projection=ccrs.SouthPolarStereo())
	ax.set_extent([-180, 180, -90, -40], ccrs.PlateCarree())
	gl = ax.gridlines(
		zorder=200,
		alpha=0.5,
		draw_labels=True,
		rotate_labels=False,
		ylabel_style=dict(ha='left'),
	)
	ax.add_feature(cfeature.LAND,
		zorder=2,
		color='#e0e0e0',
		lw=0,
	)
	ax.add_feature(cfeature.COASTLINE,
		zorder=100,
		edgecolor='#666666',
		lw=0.5,
	)

	levels = LEVELS.get(type_)

	cmap = CMAP.get(type_)

	z2, x, y = cutil.add_cyclic(z.T, lon, lat)
	if type_ in ['cyc', 'stab']:
		z2 = z2*100/n
	cf = ax.contourf(x, y, z2,
		transform=ccrs.PlateCarree(),
		levels=levels,
		cmap=cmap,
	)

	plt.colorbar(cf, label=LABEL.get(type_, type_), ticks=levels)

	theta = np.linspace(0, 2*np.pi, 100)
	center, radius = [0.5, 0.5], 0.5
	verts = np.vstack([np.sin(theta), np.cos(theta)]).T
	circle = mpath.Path(verts * radius + center)
	ax.set_boundary(circle, transform=ax.transAxes)

	plt.draw()
	for ea in gl.label_artists:
		pos = ea.get_position()
		ea.set_text('â€‰' + ea.get_text())
		if (pos[0]==150):
			ea.set_position([0, pos[1] + 2])

	plt.savefig(output, bbox_inches='tight', dpi=600)
