#!/usr/bin/env python3
'''Plot histograms of cloud occurrence binned by 2-m air temperature and SST.

Usage: plot_ta_sst_co_hist OBS MODEL OUTPUT [OPTIONS]

Arguments:

  OBS     Input for observations - the output of merge_ta_sst_co_hist (NetCDF).
  MODEL   Input for model - the output of merge_ta_sst_co_hist (NetCDF).
  OUTPUT  Output plot (PDF).

Options:

  --normalized  Produce normalized output.
'''

import sys
import os
import logging
import numpy as np
import ds_format as ds
import matplotlib.pyplot as plt
import matplotlib as mpl
import pst

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

def plot_density(density, tas, ts, diff=False, xticks=True, yticks=True):
	ext = [tas[0], tas[-1], ts[0], ts[-1]]
	ext = [x - 273.15 for x in ext]
	im = plt.imshow(density.T,
		origin='lower',
		cmap=('bwr' if diff else 'viridis'),
		extent=ext,
		interpolation='nearest',
		vmin=(-1 if diff else 0),
		vmax=(1 if diff else 1),
	)
	plt.xlim(-30, 30)
	plt.ylim(-3, 30)
	if not xticks:
		plt.gca().set_xticklabels([])
	if not yticks:
		plt.gca().set_yticklabels([])
	plt.gca().set_xticks(np.arange(-30, 40, 10))
	plt.gca().set_yticks(np.arange(0, 40, 10))
	plt.plot([-100, 100], [-100, 100], color='k', lw=0.5, linestyle='dashed')
	plt.axhline(0, color='k', lw=0.3)
	plt.axvline(0, color='k', lw=0.3)
	return im

if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv, as_unicode=True)
	if len(args) != 4:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	obs = args[1]
	model = args[2]
	output = args[3]
	normalized = opts.get('normalized', False)

	d_obs = ds.read(obs)
	d_model = ds.read(model)

	tas = d_obs['tas']
	ts = d_obs['ts']
	zfull = d_obs['zfull']
	zhalf = d_obs['zhalf']

	fig = plt.figure(figsize=(7.5, 8))

	nlevels = 6
	for level in range(nlevels):
		z1 = zhalf[level]
		z2 = zhalf[level + 1]

		mask = d_obs['hist_n'] < 10
		d_obs['density'][mask] = np.nan

		x_obs = d_obs['density'][:,:,level]
		x_model = d_model['density'][:,:,level]

		if normalized:
			x_max = np.nanpercentile(np.copy(x_obs), 90)
			x_obs /= x_max
			x_model /= x_max

		x_diff = x_model - x_obs

		plt.subplot(nlevels, 3, level*3 + 1)
		im1 = plot_density(x_obs, tas, ts,
			xticks=(level == nlevels - 1),
			yticks=True,
		)
		plt.ylabel('%d–%d' % (z1, z2))
		if level == 0:
			plt.title('OBS')
		plt.subplot(nlevels, 3, level*3 + 2)
		im2 = plot_density(x_model, tas, ts,
			xticks=(level == nlevels - 1),
			yticks=False,
		)
		if level == 0:
			plt.title('Model')
		plt.subplot(nlevels, 3, level*3 + 3)
		im3 = plot_density(
			x_diff,
			tas, ts,
			diff=True,
			xticks=(level == nlevels - 1),
			yticks=False,
		)
		if level == 0:
			plt.title('Model - OBS')

	plt.text(0.5, 0.065, 'Near-surface air temperature (°C)',
		transform=fig.transFigure, ha='center', va='center')
	plt.text(0.05, 0.5, 'Altitude (m) / SST (°C)',
		transform=fig.transFigure, ha='center', va='center', rotation=90)

	cax = fig.add_axes([0.5/3, 0.02, 0.25, 0.015])
	plt.grid(False)
	fig.colorbar(im1, cax=cax, orientation='horizontal',
		label='Cloud occurrence')

	cax = fig.add_axes([1/3 + 0.25, 0.02, 0.25, 0.015])
	plt.grid(False)
	fig.colorbar(im3, cax=cax, orientation='horizontal',
		label='Cloud occurrence anomaly')

	plt.subplots_adjust(wspace=0.1, hspace=0.1)
	plt.savefig(output, bbox_inches='tight')
