#!/usr/bin/env python3
'''Calculate cyclone distribution.

Usage: calc_cyc_dist INPUT START END OUTPUT

Arguments:

  INPUT   Input file - the output of cytrack2nc (NetCDF).
  START   Start year.
  END     End year.
  OUTPUT  Output file (NetCDF).
'''

import sys
import numpy as np
import pyproj
import ds_format as ds
import aquarius_time as aq

LAT = np.arange(-86, -39, 1)
LON = np.arange(0, 361, 1)

if __name__ == '__main__':
	if len(sys.argv) != 5:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = sys.argv[1]
	start = int(sys.argv[2])
	end = int(sys.argv[3])
	output = sys.argv[4]

	n = len(LON)
	m = len(LAT)
	start_jd = aq.from_date([1, start])
	end_jd = aq.from_date([1, end + 1])
	p = int(end_jd - start_jd + 1)

	lat, lon = np.meshgrid(LAT, LON)
	latf = lat.flatten()
	lonf = lon.flatten()
	o = len(latf)

	d = ds.read(input_)
	l = ds.dim(d, 'record')

	g = pyproj.Geod(ellps='WGS84')

	mask = np.zeros((n, m, p), bool)

	date = aq.to_date(d['time'])
	ii = np.where((date[1] >= start) & (date[1] <= end))[0]

	for i in ii:
		r = d['radius_ps'][i]
		lonc = np.full(o, d['lon'][i])
		latc = np.full(o, d['lat'][i])
		_, _, dist = g.inv(lonc, latc, lonf, latf)
		j = int(d['time'][i] - start_jd)
		mask[:,:,j] |= dist.reshape(n, m) < 2*r

	ds.write(output, {
		'hist': np.sum(mask, axis=2),
		'n': p,
		'lon': LON,
		'lat': LAT,
		'.': {
			'hist': {
				'.dims': ['lon', 'lat'],
				'long_name': 'cyclone occurrence histogram',
				'units': '1',
			},
			'n': {
				'long': 'number of days',
				'units': '1',
			},
			'lon': {
				'.dims': ['lon'],
				'long_name': 'longitude',
				'standard_name': 'longitude',
				'units': 'degree_east',
			},
			'lat': {
				'.dims': ['lat'],
				'long_name': 'latitude',
				'standard_name': 'latitude',
				'units': 'degree_north',
			},
		},
	})
