#!/usr/bin/env python3
'''Create ALCF filter for sea ice conditions.

Usage: alcf_filter_sic INPUT1 INPUT2 [YEAR] OUTPUT

Arugments:

  INPUT1  First surface data file or directory (NetCDF).
  INPUT2  Second surface data file or directory (NetCDF).
  YEAR    Year to coerce to.
  OUTPUT  Output file (NetCDF).
'''

import sys
import os
import numpy as np
import ds_format as ds
import aquarius_time as aq

def coerce_time(time, year):
	date1 = aq.to_date(time)
	year1 = date1[1]
	n = len(year1)
	ones = np.ones(n, int)
	zeros = np.zeros(n, int)
	start1 = aq.from_date([ones, year1, ones, ones, zeros, zeros, zeros, zeros])
	start = np.full(n, aq.from_date([1, year, 1, 1, 0, 0, 0]))
	dt = time - start1
	return start + dt

def mask_to_intervals(mask, time):
	ii = np.where(mask)[0]
	if len(ii) == 0:
		return []
	mask2 = np.diff(ii)	> 1
	jj = np.where(mask2)[0]
	intervals = []
	i1 = ii[0]
	for j in jj:
		i2 = ii[j]
		intervals += [[time[i1], time[i2]]]
		i1 = ii[j+1]
	intervals += [[time[i1], time[ii[-1]]]]
	return intervals

def read(filename):
	if os.path.isdir(filename):
		dd = ds.readdir(filename, ['time', 'input_sic', 'sic'])
		for d in dd:
			ds.rename_dim(d, 'sic_1', 'time')
			ds.rename(d, 'input_sic', 'sic')
		d = ds.merge(dd, 'time')
	else:
		d = ds.read(filename, ['time', 'input_sic', 'sic'])
	return d

if __name__ == '__main__':
	if len(sys.argv) not in [4, 5]:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input1 = sys.argv[1]
	input2 = sys.argv[2]
	year = int(sys.argv[3]) if len(sys.argv) == 5 else None
	output = sys.argv[-1]

	d1 = read(input1)
	d2 = read(input2)

	sic1 = d1['sic'] > 0.15
	sic2 = d2['sic'] > 0.15

	time1 = d1['time']
	time2 = d2['time']

	if year is not None:
		time1 = coerce_time(time1, year)
		time2 = coerce_time(time2, year)

	n = ds.dim(d1, 'time')
	mask = np.zeros(n, bool)
	for i in range(n):
		t = time1[i]
		j = np.argmin(np.abs(time2 - t))
		if np.abs(time2[j] - t) > 6/24:
			print('time %s not found' % aq.to_iso(t), file=sys.stderr)
			continue
		mask[i] = sic1[i] == sic2[j]

	time_bnds = mask_to_intervals(mask, d1['time'])

	ds.write(output, {
		'time_bnds': time_bnds,
		'.': {
			'time_bnds': {
				'.dims': ['time', 'bnds'],
				'standard_name': 'time',
				'long_name': 'time bounds',
				'units': ds.drivers.netcdf.JD_UNITS,
				'calendar': ds.drivers.netcdf.JD_CALENDAR,
			},
		},
	})
