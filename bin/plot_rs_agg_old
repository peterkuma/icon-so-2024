#!/usr/bin/env python3
'''Calculate radiosonde statistics from radiosonde launches within a voyage.

Usage: plot_rs_agg [OPTIONS] INPUT1 INPUT2 LAT1 LAT2 OUTPUT

Arguments:

  INPUT1   Input directory - the output of rstool (NetCDF).
  INPUT2   Input directory for sea ice filtering - the output of rstool (NetCDF).
  LAT1     Start latitude (degree).
  LAT2     End latitude (degree).
  OUTPUT   Output file (PDF).

Options:

  sea_ice: <value>  "true" to plot only sea ice profiles, "false" to plot only no sea ice profiles, or "none" to plot all profiles. Default: "none".
'''

import sys
import os
import pst
import datetime as dt
import numpy as np
import matplotlib as mpl
from matplotlib import pyplot as plt
from matplotlib.gridspec import GridSpec
import matplotlib.lines as mlines
import ds_format as ds
import aquarius_time as aq
import datetime as dt

COLORS = ['#0084C8', '#DC0000']

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

#def interp(xout, x, y):
#	np.arange(
#	xint = np.interp(zg, x)
#	return

def calc_stats(dd):
	zg = np.arange(0, 10e3, 10)
	theta = []
	for d in dd:
		mask = ~(np.ma.getmaskarray(d['zg']) | np.ma.getmaskarray(d['theta']))
		theta += [np.interp(zg, d['zg'][mask], d['theta'][mask],
			left=np.nan, right=np.nan)]
	theta_m = np.nanmean(theta, axis=0)
	theta_m = np.ma.masked_invalid(theta_m, np.nan)
	theta_low = np.nanpercentile(theta, 16, axis=0)
	theta_low = np.ma.masked_invalid(theta_low, np.nan)
	theta_high = np.nanpercentile(theta, 84, axis=0)
	theta_high = np.ma.masked_invalid(theta_high, np.nan)
	theta_low2 = np.nanpercentile(theta, 2.5, axis=0)
	theta_low2 = np.ma.masked_invalid(theta_low2, np.nan)
	theta_high2 = np.nanpercentile(theta, 97.5, axis=0)
	theta_high2 = np.ma.masked_invalid(theta_high2, np.nan)
	sic = np.nanmean([d['sic'] > 0.15 for d in dd])
	return {
		'zg': zg,
		'theta': theta_m,
		'theta_low': theta_low,
		'theta_high': theta_high,
		'theta_low2': theta_low2,
		'theta_high2': theta_high2,
		'ts': np.mean([d['ts'] for d in dd]),
		'zg_lcl': np.median([d['zg_lcl'] for d in dd]),
		#'zg_sll': np.median([d['zg_sll'] for d in dd]),
		'sic': sic,
	}

def plot_median_lcl(lcl, linestyle='solid', alpha=1, text=True):
	plt.axhline(y=lcl*1e-3, color='black', lw=0.8, linestyle=linestyle,
		alpha=alpha)
	if text:
		plt.text(24.5, lcl*1e-3, 'Median LCL',
			fontsize=8,
			weight='bold',
			verticalalignment='bottom',
			horizontalalignment='right',
		)

def plot_median_sll(sll, linestyle='solid', alpha=1, text=True):
	plt.axhline(y=lcl*1e-3, color='black', lw=0.8, linestyle=linestyle,
		alpha=alpha)
	if text:
		plt.text(24.5, lcl*1e-3, 'Median SLL',
			fontsize=8,
			weight='bold',
			verticalalignment='bottom',
			horizontalalignment='right',
		)

def plot_sll(ts, p, theta):
	p0 = p[0]
	p1 = np.interp(ts, theta, p)
	#plt.plot([ts - 273.15, ts - 273.15], [-p0*1e-2, -p1*1e-2], lw=1)
	plt.axhline(y=-p1*1e-2, color='black', lw=0.8, linestyle='dashed')
	plt.scatter(ts - 273.15, -p0*1e-2, s=5,
		clip_on=False,
		zorder=100,
		color='k'
	)
	plt.text(ts - 273.15, -p0*1e-2, 'SST',
		fontsize=8,
		weight='bold',
		horizontalalignment='center',
		verticalalignment='top',
	)
	plt.text(32, -p1*1e-2, 'SLL',
		fontsize=8,
		weight='bold',
		verticalalignment='bottom',
	)

def plot_par(ta_par_s, z, ta, label='PAR', x=0, linestyle='solid', ylim=None):
	n = len(z)
	for i in range(n):
		parz = z[i]
		if ta_par_s[i] < ta[i]:
			break
	if ylim is not None and parz*1e-3 > ylim[1]:
		return
	plt.axhline(y=parz*1e-3, color='black', lw=0.8, linestyle=linestyle)
	if label is not None:
		plt.text(x, parz*1e-3, label,
			fontsize=8,
			weight='bold',
			verticalalignment='bottom',
			horizontalalignment='right',
		)


if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv, as_unicode=True)
	if len(args) != 6:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input1 = args[1]
	input2 = args[2]
	lat1 = args[3]
	lat2 = args[4]
	output = args[5]
	sea_ice = opts.get('sea_ice', None)

	dd = []
	for file in sorted(os.listdir(obs)):
		if not file.endswith('.nc'):
			continue
		filename = os.path.join(input1, file)
		filename2 = os.path.join(input2, file)
		print('<- %s' % filename1)
		d = ds.read(filename1)
		print('<- %s' % filename2)
		if not os.path.exists(filename2):
			print('%s: files does not exist' % filename2, file=sys.stderr)
			continue
		d2 = ds.read(filename2, 'sic')
		sic = d['sic'] > 0.15
		sic2 = d2['sic'] > 0.15
		if sic != sic2:
			continue
		if sea_ice is None:
			pass
		elif sea_ice and not sic or not sea_ice and sic:
			continue
		mask = (
			~np.ma.getmaskarray(d['theta']) & ~np.isnan(d['theta']) &
			~np.ma.getmaskarray(d['zg']) & ~np.isnan(d['zg'])
		)
		ds.select(d, {'p': mask})
		d['filename'] = filename
		if len(d['p']) == 0:
			continue
		if 'ts' not in d:
			print('%s: surface parameters not present, skipping' % filename,
				file=sys.stderr)
			continue
		dd += [d]
	dd = [d for d in dd if d['lat'][0] >= lat1 and d['lat'][0] < lat2]
	d_stats = calc_stats(dd)
	plot(d_stats, dd, title=title)
	print('-> %s' % output)
	plt.savefig(output, bbox_inches='tight', dpi=600)
