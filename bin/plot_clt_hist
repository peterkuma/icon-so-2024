#!/usr/bin/env python3
'''Plot total cloud fraction histogram.

Usage: plot_clt_hist INPUT... LABEL... OUTPUT

Arguments:

  INPUT   Sources. Input directory with alcf stats output files (NetCDF).
  LABEL   Source label.
  OUTPUT  Output plot (PDF).

Options:

  panel_number: VALUE  Panel number. Default: "none".
  title: VALUE         Plot title. Default: "none".
  xlabel: VALUE        Plot x-label. One of: "true" or "false". Default: "true".
  ylabel: VALUE        Plot y-label. One of: "true" or "false". Default: "true".
'''

COLOR = ['k', '#0084C8', '#009100', '#DC0000']
HATCH = [None, '\\\\\\\\', '----', '////']

import sys
import os
import colorsys
from warnings import warn
import ds_format as ds
import numpy as np
from matplotlib import pyplot as plt
import matplotlib as mpl

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=10)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)
mpl.rc('hatch', lw=0.5)

def get_years(dirname):
	years = [
		x for x in os.listdir(dirname)
		if os.path.isdir(os.path.join(dirname, x))
	]
	return [''] if len(years) == 0 else years

def get_sources(dirname):
	for y in get_years(dirname):
		dirname2 = os.path.join(dirname, y)
		return set([x for x in os.listdir(dirname2) if x.endswith('.nc')])

def read(input_, year, source):
	filename = os.path.join(input_, year, source)
	print('<- %s' % filename)
	return ds.read(filename)

if __name__ == '__main__':
	if len(sys.argv) < 4:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	n = (len(sys.argv) - 2)//2
	input_ = sys.argv[1:(1 + n)]
	label = sys.argv[(1 + n):-1]
	output = sys.argv[-1]

	if len(input_) != len(label):
		raise ValueError('the number of inputs must be the same as the number of labels')

	sources = get_sources(input_[0])

	clt_full = None
	hist = np.zeros((n, 9), np.float64)

	for i, in_ in enumerate(input_):
		for year in get_years(in_):
			for source in sources:
				d = read(in_, year, source)
				clt_full = d['clt_full']
				if d['clt_hist'].ndim == 2:
					hist[i] += d['clt_hist'][:,0]/np.sum(d['clt_hist'][:,0])
				else:
					hist[i] += d['clt_hist']/np.sum(d['clt_hist'])
			hist[i] = hist[i]/np.sum(hist[i])*100

	plt.figure(figsize=(5, 3))
	
	margin = 100/9/20
	width = (100/9 - 2*margin)/n
	for i, in_ in enumerate(input_):
		offset = i*width - n*width/2 + width/2

		rgb = mpl.colors.ColorConverter.to_rgb(COLOR[i])
		h, l, s = colorsys.rgb_to_hls(*rgb)
		edgecolor = colorsys.hls_to_rgb(h, min(1, l*0.7), s=s)

		plt.bar(clt_full + offset, hist[i],
			width=width,
			color=COLOR[i], 
			hatch=HATCH[i],
			edgecolor=edgecolor,
			lw=0,
			zorder=100,
			label=label[i],
		)
	plt.xlabel('Daily total cloud fraction (octa)')
	plt.ylabel('Frequency (%)')
	plt.xticks(clt_full, labels=range(9))
	plt.xlim(0, 100)
	plt.legend()

	print('-> %s' % output)
	plt.savefig(output, bbox_inches='tight')
