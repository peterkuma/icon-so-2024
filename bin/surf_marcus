#!/usr/bin/env python3
'''Convert MARCUS voyage underway data to NetCDF.

Usage: surf_marcus INPUT... OUTPUT

Arguments:

  INPUT   Input file (CSV).
  OUTPUT  Output file (NetCDF).
'''

import sys
import numpy as np
import ds_format as ds
import aquarius_time as aq

def avg_angle(a, b):
	ar = a/180*np.pi
	br = b/180*np.pi
	x = 0.5*(np.cos(ar) + np.cos(br))
	y = 0.5*(np.sin(ar) + np.sin(br))
	return 180/np.pi*np.arctan2(y, x) % 360

if __name__ == '__main__':
	if len(sys.argv) < 3:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = sys.argv[1:-1]
	output = sys.argv[-1]

	dd = [ds.read(filename) for filename in input_]
	d = ds.merge(dd, 'i')

	do = {
		'time': aq.from_iso(d['date_time_utc']),
		'lat': d['latitude'],
		'lon': d['longitude'],
		'hurs': (d['rel_humidity_strbrd_percent'] + d['rel_humidity_port_percent'])*0.5,
		'ps': d['atm_press_hpa']*100,
		'ts': d['temp_sea_wtr_degc'] + 273.15,
		'tas': (d['temp_air_port_degc'] + d['temp_air_strbrd_degc'])*0.5 + 273.15,
		'wdds': avg_angle(d['wnd_dir_port_corr_deg'], d['wnd_dir_strbrd_corr_deg']),
		'wdss': (d['wnd_spd_port_corr_knot'] + d['wnd_spd_strbrd_corr_knot'])*0.5,
		'.': {
			'time': {
				'.dims': ['time'],
				'standard_name': 'time',
				'units': 'days since -4713-11-24 12:00 UTC',
				'calendar': 'proleptic_gregorian',
			},
			'lat': {
				'.dims': ['time'],
				'standard_name': 'latitude',
				'units': 'degree_north',
			},
			'lon': {
				'.dims': ['time'],
				'standard_name': 'longitude',
				'units': 'degree_east',
			},
			'tas': {
				'.dims': ['time'],
				'standard_name': 'air_temperature',
				'long-name': 'near-surface air temperature',
				'units': 'K',
			},
			'ts': {
				'.dims': ['time'],
				'standard_name': 'sea_surface_temperature',
				'units': 'K',
			},
			'hurs': {
				'.dims': ['time'],
				'standard_name': 'relative_humidity',
				'long_name': 'near-surface relative humidity',
				'units': '%',
			},
			'ps': {
				'.dims': ['time'],
				'standard_name': 'surface_air_pressure',
				'long_name': 'surface air pressure',
				'units': 'Pa',
			},
			'wdds': {
				'.dims': ['time'],
				'long_name': 'near-surface wind from direction',
				'standard_name': 'wind_from_direction',
				'units': 'degree',
			},
			'wdss': {
				'.dims': ['time'],
				'long_name': 'near-surface wind speed',
				'standard_name': 'wind_speed',
				'units': 'm s-1',
			},
		}
	}

	ds.write(output, do)
