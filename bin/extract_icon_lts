#!/usr/bin/env python3
'''Extract ICON data needed for LTS calculation.

Usage: extract_icon_lts DAY OUTPUT

Arguments:

  DAY     Day (ISO).
  OUTPUT  Output directory (NetCDF).
'''

import sys
import os
import intake
import healpy
import xarray as xr
import numpy as np
import aquarius_time as aq
import ds_format as ds

VARS = {
	'pres_sfc': 'ps',
	'tas': 'tas',
	'pfull': 'pfull',
	'ta': 'ta',
}

CATALOG = 'https://data.nextgems-h2020.eu/catalog.yaml'
ZOOM = 8
LON = np.arange(-180, 180, 0.25)
LAT = np.arange(-89, -40 + 0.25, 0.25)

if __name__ == '__main__':
	if len(sys.argv) != 3:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	day = aq.from_iso(sys.argv[1])
	output = sys.argv[2]

	c = intake.open_catalog(CATALOG)
	ids = c.ICON['ngc3028'](time='PT3H', zoom=ZOOM).to_dask()
	time = aq.from_iso('1970-01-01') + \
		(np.array(ids.time).astype('datetime64[s]').astype('int'))/(24*60*60)
	nest = ids.crs.healpix_order == 'nest'
	lon = LON
	lat = LAT
	lon2, lat2 = np.meshgrid(lon, lat)
	idx = xr.DataArray(
		healpy.ang2pix(ids.crs.healpix_nside, lon2, lat2,
			nest=nest,
			lonlat=True,
		),
		coords=[('lat', lat), ('lon', lon)],
	)
	start = day
	end = day + 1
	ii = np.where((time >= start) & (time < end))[0]

	lon_360 = lon % 360
	order = np.argsort(lon_360)
	for i in ii:
		t = time[i]
		d = {
			'lon': lon_360[order],
			'lat': lat,
			'time': [t],
			'.': {
				'lon': {
					'.dims': ['lon'],
					'standard_name': 'longitude',
					'long_name': 'longitude',
					'units': 'degrees_east',
				},
				'lat': {
					'.dims': ['lat'],
					'standard_name': 'latitude',
					'long_name': 'latitude',
					'units': 'degrees_north',
				},
				'time': {
					'.dims': ['time'],
					'standard_name': 'time',
					'long_name': 'time',
					'units': ds.drivers.netcdf.JD_UNITS,
					'calendar': ds.drivers.netcdf.JD_CALENDAR,
				},
			}
		}
		pfull = np.array(ids['pfull'].isel(time=i, cell=idx))
		level = np.argmin(np.abs(pfull - 700e2), axis=0)
		for var in VARS.keys():
			var2 = VARS[var]
			x = np.array(ids[var].isel(time=i, cell=idx))
			if var2 in ['pfull', 'ta']:
				n, m = x.shape[1:]
				d[var2] = np.full((n, m), np.nan, np.float64)
				for i2 in range(n):
					for j2 in range(m):
						d[var2][i2,j2] = x[level[i2,j2],i2,j2]
			else:
				d[var2] = x
			shape = d[var2].shape
			d[var2] = d[var2].reshape((1,) + shape)
			d[var2] = d[var2][:,:,order]
			d['.'][var2] = {
				'.dims': ['time', 'lat', 'lon'],
				'units': ids[var].units,
			}
			for k in ['long_name', 'standard_name']:
				v = getattr(ids[var], k, None)
				if v is not None:
					d['.'][var2][k] = v
		date = aq.to_date(t)
		name = '%04d%02d%02dT%02d00.nc' % (
			date[1],
			date[2],
			date[3],
			date[4],
		)
		filename = os.path.join(output, name)
		print('-> %s' % filename)
		ds.write(filename, d)
