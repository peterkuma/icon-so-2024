#!/usr/bin/env python3
'''Add sea ice concentration to observed surface data.

Usage: surface_sic SURF SIC1 SIC2 OUTPUT

Arguments:

  SURF    Input surface file (NetCDF).
  SIC1    NSIDC NSIDC0051 or AMSR_U2_L3 sea ice concentration input directory (HDF or NetCDF).
  SIC2    NSIDC NSIDC0051 or AMSR_U2_L3 sea ice concentration input directory (HDF or NetCDF).
  OUTPUT  Output file (NetCDF).
'''

import sys
import os
import numpy as np
from pyproj import Geod
from pyproj import Proj
import ds_format as ds
import aquarius_time as aq

DIST_LIM = 200e3 # m

NAME1 = 'AMSR_U2_L3_SeaIce12km_B04_%04d%02d%02d.he5'
NAME2 = 'NSIDC0051_SEAICE_PS_S25km_%04d%02d%02d_v2.0.nc'
VAR1 = 'HDFEOS/GRIDS/SpPolarGrid12km/Data Fields/SI_12km_SH_ICECON_DAY'
LAT1 = 'HDFEOS/GRIDS/SpPolarGrid12km/lat'
LON1 = 'HDFEOS/GRIDS/SpPolarGrid12km/lon'
VAR2 = 'F17_ICECON'

GEOID = Geod(ellps='WGS84')
PROJ = Proj('proj=stere +lat_0=-90 +lat_ts=-70 +lon_0=0 +x_0=0 +y_0=0 +a=6378273 +b=6356889.449 +units=m +no_defs +type=crs')

cache1 = {}
cache2 = {}

def read_sic(sic1, sic2, year, month, day, lat, lon):
	global cache1

	key = '%04d-%02d-%02d' % (year, month, day)
	if key in cache1:
		d_sic = cache1[key]
	else:
		d_sic = None
		for sic in [sic1, sic2]:
			sic_filename1 = os.path.join(sic, NAME1 % (year, month, day))
			sic_filename2 = os.path.join(sic, NAME2 % (year, month, day))
			for filename in [sic_filename1, sic_filename2]:
				try:
					d_sic = ds.read(filename)
					break
				except OSError:
					pass
			if d_sic is not None:
				break
	cache1 = {}
	cache1[key] = d_sic

	if d_sic is None:
		raise OSError('input SIC file for %04d-%02d-%02d does not exist' % (
			year, month, day
		))

	if VAR1 in d_sic:
		z = d_sic[VAR1]
		lat_sic = d_sic[LAT1]
		lon_sic = d_sic[LON1]
		lon1 = lon_sic
		lat1 = lat_sic
		lon2 = np.full(lon1.shape, lon)
		lat2 = np.full(lat1.shape, lat)
		_, _, dist = GEOID.inv(lon1, lat1, lon2, lat2)
		i = np.argmin(dist)
		d = dist.flatten()[i]
		if d > DIST_LIM:
			raise SystemError('the nearest point to (lat, lon) = (%.4f, %.4f) is further than %.0f km (%.0f km) at (lat, lon) = (%.4f, %.4f)' % (lat, lon, DIST_LIM, d/1000, lat1.flatten()[i], lon1.flatten()[i]))
		return z.flatten()[i]
	elif VAR2 in d_sic:
		z = d_sic[VAR2][0,:,:]
		x_sic = d_sic['x']
		y_sic = d_sic['y']
		x, y = PROJ(lon, lat)
		xg_sic, yg_sic = np.meshgrid(x_sic, y_sic)
		mask = ~np.ma.getmaskarray(z)
		z = z[mask]
		xg_sic = xg_sic[mask]
		yg_sic = yg_sic[mask]
		dist = ((xg_sic - x)**2 + (yg_sic - y)**2)**0.5
		i = np.argmin(dist)
		d = dist[i]
		if d > DIST_LIM:
			raise SystemError('the nearest point is further than 30 km (%.0f km)' % d)
		return float(z[i])
	else:
		raise SystemError('required variables not found in the SIC file')

if __name__ == '__main__':
	if len(sys.argv) != 5:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	surf = sys.argv[1]
	sic1 = sys.argv[2]
	sic2 = sys.argv[3]
	output = sys.argv[4]

	d_surf = ds.read(surf)
	date = aq.to_date(d_surf['time'])
	n = ds.dim(d_surf, 'time')
	x = np.full(n, np.nan, np.float64)

	for i in range(n):
		t = d_surf['time'][i]
		lat = d_surf['lat'][i]
		lon = d_surf['lon'][i]
		year = date[1][i]
		month = date[2][i]
		day = date[3][i]
		hour = date[4][i]
		key = '%04d-%02d-%02dT%02d:00' % (year, month, day, hour)
		if lat > -55:
			x[i] = 0
		elif key in cache2:
			x[i] = cache2[key]
		else:
			try:
				x[i] = read_sic(sic1, sic2, year, month, day, lat, lon)
			except SystemError as e:
				print(e, file=sys.stderr)
		cache2[key] = x[i]

	d_surf['sic'] = x
	d_surf['.']['sic'] = {
		'.dims': ['time'],
		'standard_name': 'sea_ice_area_fraction',
		'long_name': 'sea ice area fraction',
		'units': '%'
	}
	ds.write(output, d_surf)
