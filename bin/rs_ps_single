#!/usr/bin/env python3
'''Convert RV Polarstern radiosonde data to NetCDF. This is for the single profile per file format.

Usage: rs_ps_multi INPUT TRACK [SUMMARY] OUTPUT

Arguments:

  INPUT    Input file with radiosonde data (TSV).
  TRACK    Input file with track data (NetCDF).
  SUMMARY  Summary file without header (TSV).
  OUTPUT   Output file (NetCDF).
'''

import sys
import os
import re
import numpy as np
import ds_format as ds
import aquarius_time as aq

META = {
	'hur': {
		'.dims': ['p'],
		'standard_name': 'relative_humidity',
		'long_name': 'relative_humidity',
		'units': '%',
	},
	'lat': {
		'.dims': ['p'],
		'standard_name': 'latitude',
		'long_name': 'latitude',
		'units': 'degrees_north',
	},
	'lon': {
		'.dims': ['p'],
		'standard_name': 'longitude',
		'long_name': 'longitude',
		'units': 'degrees_east',
	},
	'p': {
		'.dims': ['p'],
		'standard_name': 'air_pressure',
		'long_name': 'air pressure',
		'units': 'Pa',
	},
	'ta': {
		'.dims': ['p'],
		'standard_name': 'air_temperature',
		'long_name': 'air temperature',
		'units': 'K',
	},
	'time': {
		'.dims': ['p'],
		'standard_name': 'time',
		'long_name': 'time',
		'units': 'days since -4713-11-24 12:00 UTC',
		'calendar': 'proleptic_gregorian',
	},
	'z': {
		'.dims': ['p'],
		'standard_name': 'height_above_reference_ellipsoid',
		'long_name': 'altitude',
		'units': 'm',
	},
	'wdd': {
		'.dims': ['p'],
		'standard_name': 'wind_from_direction',
		'long_name': 'wind from direction',
		'units': 'degrees',
	},
	'wds': {
		'.dims': ['p'],
		'standard_name': 'wind_speed',
		'long_name': 'wind speed',
		'units': 'm s-1',
	},
}

def lookup_track(d, t):
	i = np.argmin(np.abs(d['time'] - t))
	hour = 1/24
	if np.abs(d['time'][i] - t) < 1*hour:
		return d['time'][i], d['lat'][i], d['lon'][i]
	return np.nan, np.nan, np.nan

def lookup_time(d, filename):
	i = np.where(d['Filename'] == filename)[0][0]
	s = d['Citation of child dataset'][i]
	m = re.match(r'.*(\d\d\d\d-\d\d-\d\d \d\d\:\d\d)h.*', s)
	iso = m.group(1).replace(' ', 'T')
	return aq.from_iso(iso)

if __name__ == '__main__':
	if len(sys.argv) not in (4, 5):
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = sys.argv[1]
	track = sys.argv[2]
	summary = sys.argv[3] if len(sys.argv) == 5 else None
	output = sys.argv[-1]

	d = ds.read(input_)
	d_track = ds.read(track)
	d_summary = ds.read(summary) if summary is not None else None

	if d_summary is not None:
		name = os.path.basename(input_)
		name = os.path.splitext(name)[0] + '.tab'
		t = lookup_time(d_summary, name)
	else:
		time_s = input_[-17:-4] + '00'
		t = aq.from_iso(time_s)

	n = len(d['Altitude [m]'])
	_, lat, lon = lookup_track(d_track, t)

	do = {
		'z': d['Altitude [m]'],
		'p': d['PPPP [hPa]']*1e2,
		'hur': d['RH [%]'],
		'ta': d['TTT [Â°C]'] + 273.15,
		'wdd': d['dd [deg]'],
		'wds': d['ff [m/s]'],
		'lat': np.full(n, lat),
		'lon': np.full(n, lon),
		'time': np.full(n, t),
		'.': META,
	}

	ds.write(output, do)
