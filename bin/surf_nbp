#!/usr/bin/env python3
'''Convert RV Nathaniel B. Palmer surface data from mat to a unified surface file.

Usage: surf_nbp INPUT OUTPUT

Arguments:

  INPUT   Input file (NetCDF).
  OUTPUT  Output file (NetCDF).
'''

import os
import sys
import ds_format as ds
import numpy as np
import scipy.io
import aquarius_time as aq

def read_nbp(filename):
	d = scipy.io.loadmat(filename)
	n = len(d['yys'])
	date = (
		np.zeros(n),
		2000 + d['yys'][:,0],
		d['months'][:,0],
		d['dds'][:,0],
		d['hhs'][:,0],
		d['mms'][:,0],
		d['sss'][:,0],
		np.zeros(n),
	)
	time = aq.from_date(date)
	lat = d['lats'][:,0]
	lon = d['lons'][:,0]
	temp = d['airtemps'][:,0] + 273.15
	sst = d['SSTs'][:,0] + 273.15

	mask = (~np.isnan(time)) & \
		(~np.isnan(lon)) & \
		(~np.isnan(lat))

	return {
		'lat': lat[mask],
		'lon': lon[mask],
		'time': time[mask],
		'tas': temp[mask],
		'ts': sst[mask],
		'.': {
			'lat': {
				'.dims': ['time'],
				'standard_name': 'latitude',
				'units': 'degree_north',
			},
			'lon': {
				'.dims': ['time'],
				'standard_name': 'longitude',
				'units': 'degree_east',
			},
			'time': {
				'.dims': ['time'],
				'standard_name': 'time',
				'units': ds.drivers.netcdf.JD_UNITS,
				'calendar': ds.drivers.netcdf.JD_CALENDAR,
			},
			'tas': {
				'.dims': ['time'],
				'standard_name': 'air_temperature',
				'units': 'K',
			},
			'ts': {
				'.dims': ['time'],
				'standard_name': 'sea_surface_temperature',
				'units': 'K',
			},
		},
	}

if __name__ == '__main__':
	if len(sys.argv) != 3:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)

	input_filename = sys.argv[1]
	output_filename = sys.argv[2]

	d = read_nbp(input_filename)
	ds.to_netcdf(output_filename, d)
