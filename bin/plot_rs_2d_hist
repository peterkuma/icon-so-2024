#!/usr/bin/env python3
'''Plot radiosonde histogram of a given variable.

Usage: plot_rs_2d_hist VAR INPUT [INPUT_REF] TITLE OUTPUT

Arguments:

  VAR        Variable name.
  INPUT      Input directory - the output of rs_stats_hist (NetCDF).
  INPUT_REF  Reference directory - the output of rs_stats_hist (NetCDF).
  TITLE      Plot title.
  OUTPUT     Output plot (PDF).

Options:

  colorbar: VALUE      Show colorbar. One of: "true" or "false". Default: "true".
  titles: VALUE        Show titles. One of: "true" or "false". Default: "true".
  xlabel: VALUE        Show x-label. One of: "true" or "false". Default: "true".
  ylabel: VALUE        Show y-label. One of: "true" or "false". Default: "true".
  panel_number: VALUE  Panel number starting from 0. Default: "none".
  vlim: { LOW HIGH }   Value limits. Default: "none".
'''

import sys
import os
import glob
import string
import pst
import numpy as np
import ds_format as ds
import matplotlib as mpl
import matplotlib.colors as mcolors
import matplotlib.pyplot as plt
import alcf.misc

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
#mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

LABEL = {
	'hur': 'Relative humidity',
	'thetav': 'Virtual potential temperature',
}

UNITS = {
	'hur': '%',
	'thetav': 'Â°C',
}

XLIM = {
	'hur': [0, 100],
	'thetav': [-40, 40],
}

def read(path, var):
	x = None
	zg = None
	hist = None
	for file in sorted(glob.glob('**/*.nc', recursive=True, root_dir=path)):
		filename = os.path.join(path, file)
		d = ds.read(filename)
		if hist is None:
			x = d[var]
			if var == 'thetav':
				x -= 273.15
			zg = d['zg']
			hist = d[var+'_hist']
		else:
			hist += d[var+'_hist']
	hist = hist.astype(np.float64)
	for i in range(hist.shape[0]):
		hist[i,:] = hist[i,:]/np.sum(hist[i,:])
	return x, zg, hist

if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv, as_unicode=True)
	if len(args) not in (5, 6):
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	var = args[1]
	input_ = args[2]
	input_ref = args[3] if len(args) == 6 else None
	title = args[-2]
	output = args[-1]
	opts.setdefault('colorbar', True)
	opts.setdefault('titles', True)
	opts.setdefault('xlabel', True)
	opts.setdefault('ylabel', True)
	opts.setdefault('panel_number', None)
	opts.setdefault('vlim', None)

	x, zg, hist = read(input_, var)

	if input_ref is not None:
		x_ref, zg_ref, hist_ref = read(input_ref, var)
		assert np.array_equal(x_ref, x) and np.array_equal(zg_ref, zg)

	plt.figure(figsize=(8, 5))

	if input_ref is None:
		cmap = plt.get_cmap('viridis')
		cmap.set_over('red')
		norm = mcolors.Normalize(vmin=0, vmax=10, clip=False)
	else:
		cmap = plt.get_cmap('bwr')
		norm = mcolors.Normalize(vmin=-6, vmax=6, clip=False)

	if opts['vlim'] is not None:
		norm = mcolors.Normalize(
			vmin=opts['vlim'][0],
			vmax=opts['vlim'][1],
			clip=False
		)

	extent = (x[0], x[-1], zg[0]*1e-3, zg[-1]*1e-3)
	z = hist*100 if input_ref is None else (hist - hist_ref)*100
	plt.imshow(z,
		origin='lower',
		extent=extent,
		interpolation='none',
		cmap=cmap,
		norm=norm,
	)
	x_half = alcf.misc.half(x)
	xlim = XLIM[var]
	ylim = (0, 2)
	plt.xlim(xlim)
	plt.ylim(ylim)
	plt.gca().set_aspect((xlim[1] - xlim[0])/(ylim[1] - ylim[0]))
	if opts['xlabel']:
		plt.xlabel(
			LABEL[var] +
			(' anomaly' if input_ref is not None else '') +
			' (%s)' % UNITS[var]
		)
	if opts['ylabel']:
		plt.ylabel('Height (km)')
	else:
		plt.gca().yaxis.set_ticklabels([])
	if opts['colorbar']:
		plt.colorbar(
			norm=norm,
			extend=('max' if input_ref is None else None),
			pad=0.02,
			label='Frequency (%)'
		)
	if opts['titles']:
		plt.title(title, y=1)
	if opts['panel_number'] is not None:
		plt.text(0.02, 0.98,
			'(%s)' % string.ascii_lowercase[opts['panel_number']],
			va='top',
			transform=plt.gca().transAxes,
			fontweight='bold',
			color=('w' if input_ref is None else 'k'),
			fontsize=12,
		)
	plt.savefig(output, bbox_inches='tight', pad_inches=0.025, dpi=600)

