#!/usr/bin/env python3
'''Calculate LTS stability distribution.

Usage: calc_lts_stability_dist TYPE THRES INPUT OUTPUT

Arguments:

  TYPE    One of: "icon" (ICON) or "era5" (ERA5).
  THRES   LTS threshold (K).
  INPUT   Input directory (NetCDF).
  OUTPUT  Output file (NetCDF).
'''

import sys
import os
import scipy
from rstool.algorithms import calc_lts, calc_theta
import numpy as np
import ds_format as ds
import aquarius_time as aq

p0 = 1e5
rd = 287.058
cp = 1006
kappa = rd/cp

def calc_lts(ps, tas, p700, ta700):
	theta700 = ta700*(p0/p700)**kappa
	thetas = tas*(p0/ps)**kappa
	return theta700 - thetas

if __name__ == '__main__':
	if len(sys.argv) != 5:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	type_ = sys.argv[1]
	thres = float(sys.argv[2])
	input_ = sys.argv[3]
	output = sys.argv[4]

	n = 0
	lon = None
	lat = None
	hist = None
	do = {}

	if type_ == 'icon':
		files = sorted(os.listdir(input_))
		for file in files:
			filename = os.path.join(input_, file)
			print('<- %s' % filename)
			d = ds.read(filename)
			d1 = {}
			d1['ps'] = d['ps'][0]
			d1['p700'] = d['pfull'][0]
			d1['ta700'] = d['ta'][0]
			d1['tas'] = d['tas'][0]
			d1['lts'] = calc_lts(d1['ps'], d1['tas'], d1['p700'], d1['ta700'])
			lon = d['lon']
			lat = d['lat']
			mask = d1['lts'] >= thres
			if hist is None:
				hist = mask.T.astype(int)
			else:
				hist += mask.T
			for var in d1.keys():
				if var not in do:
					do[var] = d1[var].T
				else:
					do[var] += d1[var].T
			n += 1
		lon = lon[::4]
		lat = lat[::4]
		hist = scipy.ndimage.zoom(hist, 0.25)
		for var in do.keys():
			do[var] = scipy.ndimage.zoom(do[var], 0.25)

	elif type_ == 'era5':
		surf_dir = os.path.join(input_, 'surf')
		plev_dir = os.path.join(input_, 'plev')
		files = sorted(os.listdir(surf_dir))
		for file in files:
			filename_surf = os.path.join(surf_dir, file)
			filename_plev = os.path.join(plev_dir, file)
			print('<- %s' % filename_surf)
			d_surf = ds.read(filename_surf)
			print('<- %s' % filename_plev)
			d_plev = ds.read(filename_plev)
			d1 = {}
			lon = d_surf['lon']
			lat = d_surf['lat']
			d1['ps'] = d_surf['sp']
			d1['p700'] = np.full(d1['ps'].shape, 700e2)
			d1['tas'] = d_surf['t2m']
			d1['ta700'] = d_plev['t']
			d1['lts'] = calc_lts(d1['ps'], d1['tas'], d1['p700'], d1['ta700'])
			mask = d1['lts'] >= thres
			n += mask.shape[0]
			mask = np.sum(mask, axis=0)
			if hist is None:
				hist = mask.T.astype(int)
			else:
				hist += mask.T
			for var in d1.keys():
				x = np.sum(d1[var], axis=0).T
				if var not in do:
					do[var] = x
				else:
					do[var] += x

			# Original ERA5:
			#print('<- %s' % filename_surf)
			#d_surf = ds.read(filename_surf, [], full=True)
			#m = d_surf['.']['valid_time']['.size'][0]
			#for i in range(m):
			#	print('<- %s [time %d]' % (filename_surf, i))
			#	d_surf = ds.read(filename_surf, sel={'valid_time': i})
			#	print('<- %s [time %d]' % (filename_plev, i))
			#	d_plev = ds.read(filename_plev, sel={'time': i})
			#	lon = scipy.ndimage.zoom(d_surf['longitude'], 0.25)
			#	lat = scipy.ndimage.zoom(d_surf['latitude'], 0.25)
			#	tas = scipy.ndimage.zoom(d_surf['t2m'], 0.25)
			#	ps = scipy.ndimage.zoom(d_surf['sp'], 0.25)
			#	ta700 = scipy.ndimage.zoom(d_plev['t'], 0.25)
			#	p700 = 700e2
			#	lts = calc_lts(ps, tas, p700, ta700)
			#	mask = lts >= thres
			#	n += 1
			#	if hist is None:
			#		hist = mask.T.astype(int)
			#	else:
			#		hist += mask.T
	else:
		raise ValueError('invalid type "%s"' % type_)
	
	print('-> %s' % output)
	ds.write(output, {
		'n': n,
		'lon': lon,
		'lat': lat,
		'hist': hist,
		'ps': do['ps']/n,
		'p700': do['p700']/n,
		'tas': do['tas']/n,
		'ta700': do['ta700']/n,
		'lts': do['lts']/n,
		'.': {
			'n': {
				'long': 'number of days',
				'units': '1',
			},
			'lon': {
				'.dims': ['lon'],
				'long_name': 'longitude',
				'standard_name': 'longitude',
				'units': 'degree_east',
			},
			'lat': {
				'.dims': ['lat'],
				'long_name': 'latitude',
				'standard_name': 'latitude',
				'units': 'degree_north',
			},
			'hist': {
				'.dims': ['lon', 'lat'],
				'long_name': 'LTS stability occurrence histogram',
				'units': '1',
			},
			'ps': {
				'.dims': ['lon', 'lat'],
				'standard_name': 'surface_pressure',
				'long_name': 'surface pressure',
				'units': 'Pa',
			},
			'p700': {
				'.dims': ['lon', 'lat'],
				'standard_name': 'air_pressure',
				'long_name': 'air pressure',
				'units': 'Pa',
			},
			'tas': {
				'.dims': ['lon', 'lat'],
				'standard_name': 'air_temperature',
				'long_name': 'near-surface air temperature',
				'units': 'K',
			},
			'ta700': {
				'.dims': ['lon', 'lat'],
				'standard_name': 'air_temperature',
				'long_name': 'air temperature',
				'units': 'K',
			},
			'lts': {
				'.dims': ['lon', 'lat'],
				'long_name': 'lower tropospheric stability',
				'units': 'K',
			},
		},
	})
