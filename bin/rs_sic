#!/usr/bin/env python3
'''Extend radiosonde data with sea ice concentration from NSIDC satellite observations.

Usage: rs_sic RS SIC1 SIC2 OUTPUT

Arguments:

  RS      Radiosonde input file (NetCDF).
  SIC1    NSIDC NSIDC0051 or AMSR_U2_L3 sea ice concentration input directory (HDF or NetCDF).
  SIC2    NSIDC NSIDC0051 or AMSR_U2_L3 sea ice concentration input directory (HDF or NetCDF).
  OUTPUT  Output file (NetCDF).
'''

import sys
import os
import numpy as np
from pyproj import Geod
from pyproj import Proj
import ds_format as ds
import aquarius_time as aq

DIST_LIM = 200e3 # m

NAME1 = 'AMSR_U2_L3_SeaIce12km_B04_%04d%02d%02d.he5'
NAME2 = 'NSIDC0051_SEAICE_PS_S25km_%04d%02d%02d_v2.0.nc'

VAR1 = 'HDFEOS/GRIDS/SpPolarGrid12km/Data Fields/SI_12km_SH_ICECON_DAY'
LAT1 = 'HDFEOS/GRIDS/SpPolarGrid12km/lat'
LON1 = 'HDFEOS/GRIDS/SpPolarGrid12km/lon'

VAR2 = 'F17_ICECON'

if __name__ == '__main__':
	if len(sys.argv) != 5:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	rs = sys.argv[1]
	sic1 = sys.argv[2]
	sic2 = sys.argv[3]
	output = sys.argv[4]

	#try:
	#	d_rs = ds.read(output, ['sic'])
	#	if 'sic' in d_rs:
	#		sys.exit(0)
	#except IOError:
	#	pass

	d_rs = ds.read(rs)
	lon_rs = d_rs['lon'][0]
	lat_rs = d_rs['lat'][0]

	if lat_rs > -55:
		d_rs['sic'] = 0
		ds.write(output, d_rs)
		sys.exit(0)

	time = d_rs['time'][0]
	date = aq.to_date(time)
	year = date[1]
	month = date[2]
	day = date[3]

	d_sic = None
	for sic in [sic1, sic2]:
		sic_filename1 = os.path.join(sic, NAME1 % (year, month, day))
		sic_filename2 = os.path.join(sic, NAME2 % (year, month, day))
		for filename in [sic_filename1, sic_filename2]:
			try:
				d_sic = ds.read(filename)
				break
			except OSError:
				pass
		if d_sic is not None:
			break

	if d_sic is None:
		raise OSError('input SIC file does not exist')

	if VAR1 in d_sic:
		z = d_sic[VAR1]
		lat = d_sic[LAT1]
		lon = d_sic[LON1]
		geoid = Geod(ellps='WGS84')
		lon1 = lon
		lat1 = lat
		lon2 = np.full(lon1.shape, lon_rs)
		lat2 = np.full(lat1.shape, lat_rs)
		_, _, dist = geoid.inv(lon1, lat1, lon2, lat2)
		i = np.argmin(dist)
		d = dist.flatten()[i]
		if d > DIST_LIM:
			raise SystemError('%s: the nearest point to (lat, lon) = (%.4f, %.4f) is further than %.0f km (%.0f km) at (lat, lon) = (%.4f, %.4f)' % (rs, lat_rs, lon_rs, DIST_LIM, d/1000, lat1.flatten()[i], lon1.flatten()[i]))
		d_rs['sic'] = z.flatten()[i]
	elif VAR2 in d_sic:
		z = d_sic[VAR2][0,:,:]
		x = d_sic['x']
		y = d_sic['y']
		p = Proj('proj=stere +lat_0=-90 +lat_ts=-70 +lon_0=0 +x_0=0 +y_0=0 +a=6378273 +b=6356889.449 +units=m +no_defs +type=crs')
		x_rs, y_rs = p(lon_rs, lat_rs)
		xg, yg = np.meshgrid(x, y)
		mask = ~np.ma.getmaskarray(z)
		z = z[mask]
		xg = xg[mask]
		yg = yg[mask]
		dist = ((xg - x_rs)**2 + (yg - y_rs)**2)**0.5
		i = np.argmin(dist)
		d = dist[i]
		if d > DIST_LIM:
			raise SystemError('%s: the nearest point is further than 30 km (%.0f km)' % (rs, d))
		d_rs['sic'] = float(z[i])
	else:
		raise SystemError('required variables not found in the SIC file')

	ds.write(output, d_rs)
