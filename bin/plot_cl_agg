#!/usr/bin/env python3
'''Plot aggregate lidar cloud occurrence from observational and model data output by ALCF.

Usage: plot_cl_agg OBS MODEL... LABEL... OUTPUT

Arguments:

  OBS     Input directory with observational data - the output of alcf stats (NetCDF).
  MODEL   Input directory with model data- the output of alcf stats (NetCDF). If subdirectories are present, they are expected to be multiple years to be aggregated.
  LABEL   Model label.
  OUTPUT  Output plot (PDF).

Options:bin/plot_cl_agg

  rfo_ref: VALUE       RFO reference directory (NetCDF). Default: "none".
  xlabel: VALUE        Plot x-label. One of: "true" or "false". Default: "true".
  ylabel: VALUE        Plot y-label. One of: "true" or "false". Default: "true".
'''

import os
import sys
import warnings
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import pst
import ds_format as ds
import string

COLOR = ['k', '#0084C8', '#009100', '#DC0000']
LINESTYLE = ['solid', 'dashed', 'dotted', 'dashdot']

VARS = ['time_total', 'cl', 'clt', 'input_rsut_avg', 'input_rlut_avg']

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=9)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

def get_years(dirname):
	years = [
		x for x in os.listdir(dirname)
		if os.path.isdir(os.path.join(dirname, x)) and \
		not x.startswith('_')
	]
	return [''] if len(years) == 0 else years

def get_sources(dirname):
	for y in get_years(dirname):
		dirname2 = os.path.join(dirname, y)
		return set([x for x in os.listdir(dirname2) if x.endswith('.nc')])

def read(filename):
	#print('<- %s' % filename)
	return ds.read(filename)

if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv, as_unicode=True)
	if len(args) < 3:
		sys.stderr.write(sys.modules['__main__'].__doc__)
		sys.exit(1)
	n = (len(args) - 3)//2
	n2 = n + 1
	obs = args[1]
	models = args[2:(2 + n)]
	labels = args[(2 + n):-1]
	output = args[-1]
	opts.setdefault('rfo_ref', None)
	opts.setdefault('xlabel', True)
	opts.setdefault('ylabel', True)

	if len(models) != len(labels):
		raise ValueError('number of models and labels must be the same')

	sources = get_sources(obs)

	for mod in models:
		mod_sources = get_sources(mod)
		missing = sources - mod_sources
		for s in missing:
			warnings.warn('source "%s" not present in "%s"' % (s, mod))
		sources &= mod_sources

	x = {}
	xm = {}
	xh = {}
	xl = {}

	for var in VARS:
		x[var] = [[] for i in range(n2)]
		xm[var] = [[] for i in range(n2)]
		xh[var] = [[] for i in range(n2)]
		xl[var] = [[] for i in range(n2)]

	zfull = None

	time_total = 0
	for i, source in enumerate(sources):
		obs_filename = os.path.join(obs, '', source)
		d_obs = read(obs_filename)
		for var in VARS:
			x[var][0] += [d_obs[var]]
		zfull = d_obs['zfull']
		time_total += d_obs['time_total']

		for j, mod in enumerate(models):
			for y in get_years(mod):
				mod_filename = os.path.join(mod, y, source)
				d_mod = read(mod_filename)
				for var in VARS:
					if d_mod[var].ndim == 2:
						x[var][j+1] += [d_mod[var][:,0]]
					else:
						x[var][j+1] += [d_mod[var][0]]

	for i in range(n2):
		mask = np.array(x['time_total'][i]) >= 7*24*60*60
		for var in VARS:
			y = np.array(x[var][i])
			xm[var][i] = np.nanmean(y, axis=0)
			# Only consider voyages with 7 days of data or more.
			xl[var][i] = np.nanpercentile(y[mask], 16, axis=0)
			xh[var][i] = np.nanpercentile(y[mask], 84, axis=0)

	plt.figure(figsize=(4, 4))

	lines = []
	for i in ([0] + list(range(1, n2))[::-1]):
		line, = plt.gca().plot(xm['cl'][i], zfull*1e-3,
			color=COLOR[i],
			linestyle=LINESTYLE[i],
			lw=1.5,
			label=('%s; CF %.0f%% (%.0fâ€“%.0f%%); SW %.0f; LW %.0f' % (
				(labels[i-1] if i > 0 else 'OBS'),
				xm['clt'][i],
				xl['clt'][i],
				xh['clt'][i],
				xm['input_rsut_avg'][i],
				xm['input_rlut_avg'][i],
			)),
		)
		lines += [line]

		plt.fill_betweenx(zfull*1e-3, xl['cl'][i], xh['cl'][i],
			color=COLOR[i],
			edgecolor='none',
			alpha=0.2
		)

	plt.gca().set_xticks(np.arange(0, 60, 10))
	plt.gca().set_yticks(np.arange(0, 6, 1))
	plt.xlim(0, 40)
	plt.ylim(0, 5)
	handles = [lines[0]] + lines[1:][::-1]
	plt.legend(handles=handles,
		handlelength=1,
		bbox_to_anchor=[1, 1],
		borderaxespad=0
	)
	if opts['xlabel']:
		plt.xlabel('Cloud occurrence (%)')
	if opts['ylabel']:
		plt.ylabel('Height (km)')

	misc_text = ''
	if opts['rfo_ref'] is not None:
		dd = ds.readdir(opts['rfo_ref'], ['time_total'])
		time_total_ref = np.nansum([d['time_total'] for d in dd])
		misc_text += 'RFO = %d%%\n' % round(time_total/time_total_ref*100)
	misc_text += '%d days' % (time_total/(24*60*60))
	plt.text(0.98, 0.72, misc_text,
		transform=plt.gca().transAxes,
		fontsize=12,
		ha='right',
		va='top',
	)

	print('-> %s' % output)
	plt.savefig(output, bbox_inches='tight', pad_inches=0.05)
