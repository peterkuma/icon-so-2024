#!/usr/bin/env python3
'''Plot radiosonde statistics.

Usage: plot_rs_agg TYPE INPUT... LABEL... OUTPUT

Arguments:

  TYPE    One of: "theta_hur" (potential temperature) or "lcl" (LCL).
  INPUT   Input directory - the output of rs_stats (NetCDF). If subdirectories are present, they are expected to be multiple years to be aggregated.
  LABEL   Input label.
  OUTPUT  Output file (PDF).
'''

import sys
import os
import pst
import datetime as dt
import numpy as np
import matplotlib as mpl
from matplotlib import pyplot as plt
from matplotlib.gridspec import GridSpec
import matplotlib.lines as mlines
import ds_format as ds
import aquarius_time as aq
import datetime as dt

COLOR = ['k', '#0084C8', '#009100', '#DC0000']
LINESTYLE = ['solid', 'dashed', 'dotted', 'dashdot']

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

def get_years(dirname):
	years = [
		x for x in os.listdir(dirname)
		if os.path.isdir(os.path.join(dirname, x)) and \
		not x.startswith('_')
	]
	return [''] if len(years) == 0 else years

def read(dirname):
	zg = None
	theta = []
	hur = []
	lcl = None
	lcl_hist = []

	years = get_years(dirname)
	for y in years:
		dirname2 = os.path.join(dirname, y)
		files = sorted(os.listdir(dirname2))
		for file in files:
			if not file.endswith('.nc'):
				continue
			filename = os.path.join(dirname2, file)
			print('<- %s' % filename)
			d = ds.read(filename)
			zg = d['zg']
			theta += [d['thetav_avg']]
			hur += [d['hur_avg']]
			lcl = d['lcl']
			lcl_hist += [d['lcl_hist']/np.sum(d['lcl_hist'])]

	theta_m = np.mean(theta, axis=0)
	theta_low = np.percentile(theta, 16, axis=0)
	theta_high = np.percentile(theta, 84, axis=0)
	hur_m = np.mean(hur, axis=0)
	hur_low = np.percentile(hur, 16, axis=0)
	hur_high = np.percentile(hur, 84, axis=0)
	lcl_hist_avg = np.mean(lcl_hist, axis=0)

	return {
		'zg': zg,
		'theta_m': theta_m,
		'theta_low': theta_low,
		'theta_high': theta_high,
		'hur_m': hur_m,
		'hur_low': hur_low,
		'hur_high': hur_high,
		'lcl': lcl,
		'lcl_hist_avg': lcl_hist_avg,
	}

def plot_theta_hur(dirname, label, color='k', linestyle='solid'):
	d = read(dirname)

	plt.subplot(1, 2, 1)
	plt.plot(d['theta_m'] - 273.15, d['zg']*1e-3,
		label=label,
		color=color,
		linestyle=linestyle,
	)
	plt.fill_betweenx(
		d['zg']*1e-3,
		d['theta_low'] - 273.15,
		d['theta_high'] - 273.15,
		color=color,
		edgecolor='none',
		alpha=0.15,
	)
	plt.plot(d['theta_low'] - 273.15, d['zg']*1e-3,
		color=color,
		linestyle=linestyle,
		lw=0.5,
	)
	plt.plot(d['theta_high'] - 273.15, d['zg']*1e-3,
		color=color,
		linestyle=linestyle,
		lw=0.5,
	)
	plt.xlim(-10, 40)
	plt.ylim(0, 5)
	plt.xlabel('$\\theta_v$ (Â°C)')
	plt.ylabel('Height (km)')
	plt.legend(loc='lower right', borderaxespad=0)

	plt.subplot(1, 2, 2)
	plt.plot(d['hur_m'], d['zg']*1e-3,
		color=color,
		linestyle=linestyle,
	)
	plt.fill_betweenx(d['zg']*1e-3, d['hur_low'], d['hur_high'],
		color=color,
		edgecolor='none',
		alpha=0.15,
	)
	plt.plot(d['hur_low'], d['zg']*1e-3,
		color=color,
		linestyle=linestyle,
		lw=0.5,
	)
	plt.plot(d['hur_high'], d['zg']*1e-3,
		color=color,
		linestyle=linestyle,
		lw=0.5,
	)
	plt.xlim(25, 100)
	plt.gca().set_xticks(np.arange(25, 125, 25))
	plt.ylim(0, 5)
	plt.xlabel('RH (%)')
	plt.gca().yaxis.set_ticklabels([])

	plt.subplots_adjust(wspace=0.15)

def plot_lcl(dirname, label, color='k', linestyle='solid'):
	d = read(dirname)
	plt.plot(d['lcl_hist_avg']*100, d['lcl']*1e-3,
		label=label,
		color=color,
		linestyle=linestyle,
		lw=1.3,
	)
	plt.xlim(0, 32)
	plt.xticks(np.arange(0, 40, 10))
	plt.ylim(0, 5)
	plt.xlabel('LCL frequency (%)')
	plt.ylabel('Height (km)')
	plt.legend(loc='upper right')

if __name__ == '__main__':
	if len(sys.argv) < 5:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	type_ = sys.argv[1]
	n = (len(sys.argv) - 3)//2
	input_ = sys.argv[2:(2+n)]
	labels = sys.argv[(2+n):-1]
	output = sys.argv[-1]

	if len(input_) != len(labels):
		raise ValueError('the number of labels must be the same as the number of inputs')

	if type_ == 'theta_hur':
		plt.figure(figsize=(4, 4))
		for i, (dirname, label) in enumerate(zip(input_, labels)):
			plot_theta_hur(dirname, label,
				color=COLOR[i],
				linestyle=LINESTYLE[i],
			)
	elif type_ == 'lcl':
		plt.figure(figsize=(2, 4))
		for i, (dirname, label) in enumerate(zip(input_, labels)):
			plot_lcl(dirname, label,
				color=COLOR[i],
				linestyle=LINESTYLE[i],
			)
	else:
		raise ValueError('invalid type "%s"' % type_)

	print('-> %s' % output)
	plt.savefig(output, bbox_inches='tight', dpi=600)
